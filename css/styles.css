:root {
  --button-color: #004498;
  --font-color: #333;
  --heading-color: #004498;
  --h1-color: #fff;
  --menu-color:#A5D1E7;
  --menu-icon-line-h: 4px;
  --menu-icon-line-h: 30px;
  --form-bg-color: #A5D1E7;
  --form-bg-color-light: #A5D1E7;
  --form-font-color: #fff;
  ;
}

* {
  box-sizing: border-box;
}

img {
  display: block;
  width: 100%;
}

.bg-img {
  width: 100vw;
  height: 100vh;
  /* move this to .hero img */
  /* object-fit: cover; */
  position: fixed;
  top: 0;
  left: 0;
  z-index: -2;
}

body {
  color: var(--font-color);
  font-family: "Nunito Sans", sans-serif;
  line-height: 1.5;
}

/* why is the padding needed? Especially the right and left? 
h2 {
  padding: 2rem 2rem; 
} */

/* moved from below where they were near the .hero declaration */
h2,
h3,
h4 {
  color: var(--heading-color);
  font-family: "Epilogue", sans-serif;
  /* since you have a fixed background image, use padding to close gaps caused by margin */
  margin: 0;
  padding-top: 0;
}

/* this was already set in body, so this is redundant */
/* p {
  line-height: 1.5;
} */

img {
  width: 100%;
  display: block;

  /* invalid */
  /* display: center; */
}

a {
  cursor: pointer;
  /* you don't necessarily want lines in <p> to be 
     block, I'd only use this for menus and cards */
  /* display: block; */
  text-decoration: none;
  color: var(--h1-color);
}

header {
  background: linear-gradient(to bottom, #000, transparent);
  color: #fff;
  padding: 20px 2rem 40px;
  font-size: 20px;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
}

header .menu-icon {
  position: fixed;
  top: 1rem;
  left: 1rem;
  padding: 1rem;
  border-radius: 50%;
  z-index: 1;
}

header nav {
  display: flex;
  align-items: center;
  justify-content: center;
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background-color:var(--menu-color);
}
/* made sure you limit these styles to just the header. You
  don't want all <ul> to be un-styled */
header ul {
  /* have the <ul> be a flexbox */
  display: flex;
  flex-direction: column;
  list-style-type: none;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

/* floats are evil - make the ul display: flex*/
/* li {
  float: left;
} */

li a {
  display: block;
  color: white;
  text-align: center;
  padding: 16px;
  /* not needed since it's inherited from the a style above */
  /* text-decoration: none; */
}

li a:hover {
  background-color: transparent;
}

.main-menu {
  transform: translateX(-510px);
  transition: 300ms ease;
}

.menu-show {
  transform: translateY(0);
}

header .menu-icon {
  position: fixed;
  top: 1rem;
  left: 1rem;
  background-color: var(--menu-color);
  padding: 1rem;
  border-radius: 50%;
  z-index: 1;
  width: 56px;
  height: 56px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 6px;
}

.menu-icon div {
  width: var(--menu-icon-line-w);
  height: var(--menu-icon-line-h);
  background-color: pink;

  transition: transform 400ms;

}

article {
  background-color: #fff;
  padding-bottom: 2rem;
}

.scroll-down {
  background-color: #a5d1e7;
  padding: 1rem 2rem;

  position: fixed;
  left: 0;
  bottom: 0;
  width: 100%;

  cursor: pointer;

  font-size: 1rem;
  color: #fff;
  text-align: center;

  z-index: -1;
}

.scroll-down::after {
  display: inline-block;
  padding-bottom: 0;
  padding-left: 10px;
  content: "â–¼";
}

.solid-menu {
  background: #a5d1e7;
  padding-bottom: 20px;
}

/* I don't believe you use any of these */
/* .full-spacer {
  height: 100vh;
}

.small-spacer {
  height: 60vh;
}

.hidden {
  display: none;
} */

section > article:last-child {
  padding-bottom: 50vh;
}

/* already declared */
/* a {
  text-decoration: none;
} */

/* I moved these to the top of the style sheet */
/* h2,
h3,
h4 {
  color: var(--heading-color);
  font-family: "Epilogue", sans-serif;
  margin: 3rem 0 0;
} */

/* since I moved bg-img class to .hero, this would override position fixed */
/* .hero {
  position: relative;
} */

/* added basic overlay with ::after */
.hero::after {
  content: "";
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.4);
}

.hero img {
  height: 100%;
  object-fit: cover;
}

/* .hero h1 {
  color: #fff;
  text-shadow: 0 0 30px rgb(0 0 0 / 70%);
  font-size: 3.5rem;
  color: var(--h1-color);
  font-family: "Epilogue", sans-serif;
  margin: 0;
} */

.hero p {
  color: var(--h1-color);
  font-size: 2rem;
  margin: 0;
}

/* I'm trying this instead of an overlay */
.title {
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  font-family: "Epilogue", sans-serif;
}

.title h1,
.title p {
  /* this is simply the complement to the dark blue color on your hero image.
  I'm just trying it out. */
  color: #fff;
  text-shadow: 0px 0px 3px black;

  /* text shadow to help make the text stand out over image */
  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.8);
  /* offset from edge of screen on mobile */
  margin: 0 1rem;
}

.title h1 {
  line-height: 1;
  font-size: clamp(3rem, 7vw, 6rem);
}

.title p {
  font-size: 2rem;
}

.panel {
  display: flex;
  flex-direction: column;
  padding: 2rem 4rem;
  gap: 1rem;
}
.panel .left {
  order: -1;
}

.cards {
  display: flex;
  flex-direction: column;
  flex-direction: column;
  object-fit: fill;
  font-family: "Epilogue", sans-serif;
  font-weight: 600;
  padding: 0 1rem;
  gap: 1rem;

  /* to keep them from being see through */
  background-color: white;
}

.card {
  flex: 1 1 45%;
  object-fit: cover;
  position: relative;
  margin-bottom: 3rem;
  /* aspect-ratio: 1/1; */
}

.card .image-wrapper::after {
  content: "";
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background-color: rgba(0, 0, 0, 0.2);
  z-index: 10;
}

.card:hover .image-wrapper::after {
  background-color: transparent;
}

/* since I moved the display block from the general a declaration, add it back here */
.card a {
  display: block;
}

.card img {
  height: 100%;
}

.card .text-wrapper {
  /* this was declared already at the top of the stylesheet */
  /* box-sizing: border-box; */
  position: absolute;
  bottom: 0;
  width: 100%;
  color: white;
  background: linear-gradient(
    to bottom,
    transparent 0,
    rgba(0, 0, 0, 0.6) 100%
  );
  padding: 3rem 0.5rem 0.75rem;
}

.button {
  cursor: pointer;
  display: inline-block;
  border: 3px solid var(--button-color);
  border-radius: 5px;
  padding: 0.8rem 2rem 0.8rem;
  color: var(--button-color);
  margin-top: 2rem;
  margin-right: 1rem;
  transition: background-color 300ms, color 300ms;
}

.button:hover {
  color: #a5d1e7;
  background-color: var(--button-color);
}



@media (min-width: 500px) {
  header {
    background: linear-gradient(to bottom, #000, transparent);
    color: #fff;
    padding: 20px 2rem 40px;
    font-size: 20px;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
  }
  header .menu-icon {
    display: none;
    position: static;
  }

  header nav {
    position: static;
    background-color: transparent;
    justify-content: flex-start;
  }
  /* made sure you limit these styles to just the header. You
    don't want all <ul> to be un-styled */
  header ul {
    /* have the <ul> be a flexbox */
    display: flex;
    flex-direction: row;
    list-style-type: none;
    overflow: hidden;
  }
  
  /* floats are evil - make the ul display: flex*/
  /* li {
    float: left;
  } */
  
  li a {
    display: block;
    color: white;
    text-align: center;
    padding: 16px;
    /* not needed since it's inherited from the a style above */
    /* text-decoration: none; */
  }
  
  li a:hover {
    background-color: transparent;
  }

.main-menu {
  transform: none;
}
.menu-show .menu-icon {
  gap:0;
}
.menu-show .menu-icon div:first-child {
  transform: translateY(calc(var(--menu-icon-h) / 2)) rotate(135deg);
}
.menu-show .menu-icon div:last-child {
  transform: translateY(calc(var(--menu-icon-h) / -2)); rotate(-135deg)
}
  

  .panel {
    flex-direction: row;
  }
  .panel .text-wrapper {
    flex: 1 1 60%;
  }
    .panel .image-wrapper {
      flex: 1 1 40%;
     }
}

h5 {
  color: var(--heading-color);
  font-family: Epilogue;
  font-size: 2rem;
  margin-top: 100px;
}

form {
  display: grid;
  grid-template-columns: 1fr;
  font-size: 1.4rem;
  line-height: 1.5;
  margin-top: 100px;
}

fieldset {
  border: none;
  display: grid;
  grid-template-columns: min-content 1fr;
  grid-column-gap: 1rem;
}

/* legend is not considered a child of fieldset and may not render in the grid */
legend {
  line-height: 1.2;
  grid-column: span 2;
  margin-bottom: 0.6rem;
}

input:not([type="radio"]):not([type="checkbox"]),
fieldset,
textarea {
  margin-bottom: 1.5rem;
}

input:not([type="radio"]):not([type="checkbox"]),
textarea {
  background-color: #fff;
  padding: 0.3rem;
}

button {
  justify-self: center;
  padding: 0.5rem 1rem;
  font-size: 1.2rem;
  background-color: var(--form-bg-color);
  color: var(--form-font-color);
  border: 2px solid var(--form-font-color);
  border-radius: 6px;
  margin-bottom: 3rem;

  transition: background-color 300ms;
}

button:hover,
button:focus {
  color: var(--form-bg-color);
  background-color: var(--form-bg-color-light);
}

/* checkboxes and radios will have their own hover and focus states in next example. you don't need to add the :not() if you place your button hover and focus states below this */
input:not([type="radio"]):not([type="checkbox"]):hover,
input:not([type="radio"]):not([type="checkbox"]):focus,
textarea:hover,
textarea:focus {
  outline: 1px solid #A5D1E7;
  background-color: var(--form-bg-color-light);
}


  form > label {
    justify-self: end;
  }

  label[for="textbox"] {
    justify-self: start;
  }

  fieldset,
  label[for="textbox"],
  textarea,
  button {
    grid-column: 2;
  }
  @media (min-width: 500px) {
    form {
      grid-template-columns: max-content 1fr;
      grid-column-gap: 1rem;
}

@media (min-width: 570px) {
  .cards {
    flex-direction: row;
    flex-wrap: wrap;
  }
}

@media (min-width: 800px) {
  .cards {
    flex-wrap: nowrap;
  }
} 
.hourglass{
  display:block;
  background:$bg;
  margin:3em auto;
  width:2em;
  height:4em;
  animation:hourglass 1s linear infinite;
}

.outer{
  fill:$fill;
}

.middle{
  fill:$bg;
}

@keyframes hourglass{
  0%{
      transform:rotate(0deg);
      box-shadow:
          inset $fill 0 -0em 0 0,
          inset $bg 0 -2em 0 0,
          inset $fill 0 -4em 0 0;
  }
  80%{
      transform:rotate(0deg);
      box-shadow:
          inset $fill 0 -2em 0 0,
          inset $bg 0 -2em 0 0,
          inset $fill 0 -2em 0 0;
  }
  100%{
      transform:rotate(180deg);
      box-shadow:
          inset $fill 0 -2em 0 0,
          inset $bg 0 -2em 0 0,
          inset $fill 0 -2em 0 0;
  }
}
